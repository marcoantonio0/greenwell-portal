// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  last_name        String
  email            String            @unique
  password         String
  occupationId     Int?
  occupation       Occupation?       @relation(fields: [occupationId], references: [id])
  phone            String?
  active           Boolean @default(true)
  isAdmin          Boolean @default(false)
  teamId           Int?
  team             Team?             @relation("currentUserTeam", fields: [teamId], references: [id])
  appointmentTimes appointmentTime[]
  managerAt        Team[]            @relation("currentManagerTeam")
  news News[]
  notifications Notification[]
  projectManager Project[]
  comments Comment[]
  tasks Task[]
}

model Team {
  id        Int    @id @default(autoincrement())
  name      String
  managerId Int?
  manager   User?  @relation("currentManagerTeam", fields: [managerId], references: [id])
  user      User[] @relation("currentUserTeam")
  
  projects Project[]
}

model appointmentTime {
  id     Int  @id @default(autoincrement())
  time  DateTime @default(now())
  userId Int
  type  appointmentTimeType
  user   User @relation(fields: [userId], references: [id])
}

enum appointmentTimeType {
  ENTRY
  OUT
}

model Occupation {
  id     Int  @id @default(autoincrement())
  name   String
  users User[]
}

model Project {
  id     Int  @id @default(autoincrement())
  name String
  managerId Int?
  manager User? @relation( fields: [managerId], references: [id])
  description String?
  teamId Int
  deadline DateTime?
  status ProjectStatus @default(BACKLOG)
  createdAt DateTime @default(now())
  comments Comment[]
  updatedAt DateTime?
  team   Team?  @relation( fields: [teamId], references: [id])
  tasks Task[]
}

model Task {
  id     Int  @id @default(autoincrement())
  title String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime?
  status TaskStatus @default(INACTIVE)
  projectId Int
  project Project @relation(fields: [projectId], references: [id])
  hoursSpended Int?
  userId Int
  points Int?
  user User @relation(fields: [userId], references: [id])
  comments Comment[]
}

enum TaskStatus {
  INACTIVE
  WORKING
  IN_PROGRESS
  TESTING
  BLOCKED
  COMPLETED
}

enum ProjectStatus {
  BACKLOG
  WORKING
  IN_PROGRESS
  COMPLETE
  CANCELED
}

model Comment {
  id     Int  @id @default(autoincrement())
  content String
  authorId Int
  author   User @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])
  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])
}


model News {
  id     Int  @id @default(autoincrement())
  title String
  subTitle String?
  content String
  authorId Int?
  createdAt DateTime @default(now())
  author  User?  @relation( fields: [authorId], references: [id])
}

model globalNotification {
  id     Int  @id @default(autoincrement())
  title String?
  content String
  type NotificationType @default(COMMOM)
}

enum NotificationType {
  WARNING
  INFO
  SUCCESS
  DANGER
  COMMOM
}

model Notification {
  id     Int  @id @default(autoincrement())
  title String
  content String
  type NotificationType @default(INFO)
  userId Int
  readed Boolean @default(false)
  createdAt DateTime @default(now())
  user  User @relation(fields: [userId], references: [id])
}

